#!/home/statsadmin/R/bin/Rscript

args <- commandArgs()
idx <- as.numeric(args[length(args)])+1
.libPaths('ysidi/lib')

library(tidyr, warn.conflicts = F, quietly = T)
library(dplyr, warn.conflicts = F, quietly = T)
library(purrr, warn.conflicts = F, quietly = T)
library(reshape2, warn.conflicts = F, quietly = T)
library(mice, warn.conflicts = F, quietly = T)

source("init.R")
source("ni.d.R")
source("add.X.R")
source("FM.CI.R")
source("p.rmle.fm.R")
source("miss.fun.R")
source("mice.run.R")
source("mi.comb.R")
source("miss.param.assign.R")

ss.bounds <- readRDS("ss.bounds.rds")

meth <- 'fm'
scenario <- {{scenario}}

ss <- ss.bounds%>%
  dplyr::filter(method == meth, scenario.id == scenario)

do.val <- {{val}}

rho.val <- 'p30'

setn <- {{setn}}

system.time({
  

  
 set.seed(10000*scenario + idx)                                                   
 #generate full data with desired correlation structure
 dt.H0 <- ni.d(N_T = ss$n.arm,
               N_C = ss$n.arm,
               p_T = ss$p_C - ss$M2,
               p_C = ss$p_C)%>%
   add.X(rho=0.3, ss$ub)
 
 #define missingness parameters and do rates
m.param <- miss.param.assign(do = do.val)

 #impose missing values and perform analysis
x1 <-  m.param%>%
   split(.$missing)%>%
   purrr::set_names(sort(m.param$missing))%>%
   purrr::map_df(.f=function(xx,df){
     miss.fun(df = dt.H0, b.trt = xx$b.trt, b.Y = xx$b.Y,b.X = xx$b.X, do = do.val,
              M2 = ss$M2,
              ci.method = FM.CI,
              mice.anal = TRUE)
     },df = y, .id = 'missing')%>%
   dplyr::mutate(scenario.id = ss$scenario.id,
                 p_C = ss$p_C,
                 p_T = ss$p_C,
                 M2 = ss$M2,
                 type = 't.H0',
                 do = do.val,
                 sim.id = idx)

}) 
saveRDS(x1, sprintf("outH0_set%d_%s_%s%d_%d_%d.rds", setn, rho.val, meth, scenario, round(100*do.val,0), idx))





